#!/usr/bin/perl

# Purpose:  help me manage MR configurations

use strict;

our $home = $ENV{"HOME"};
our $hostname = `hostname`;
chop $hostname;
our $user=$ENV{"USERNAME"};
our %Globals;

$Globals{"confdir"} = "$home/.config/mr";
$Globals{"availabledir"} = "$home/.config/mr/available.d";
$Globals{"hostdir"} = "$home/.config/mr/host.d/$hostname";

&main;

sub main {

    print "* denotes configuration in use\n";

    &readInUseFiles;

    if($ARGV[0] eq "show") {
	shift @ARGV;
	my @available = &getFiles($Globals{"availabledir"});
	my @toadd = &filter(\@available, @ARGV);
	print "Matches tags:\n";
	&showFiles(@toadd);
    }
    elsif($ARGV[0] eq "add") {
	shift @ARGV;
	my @available = &getFiles($Globals{"availabledir"});
	my @toadd = &filter(\@available, @ARGV);
	&addFiles($Globals{hostdir}, @toadd);
	&showInUse;
    }
    elsif($ARGV[0] eq "remove") {
	shift @ARGV;
	my @available = &getFiles($Globals{"availabledir"});
	my @toadd = &filter(\@available, @ARGV);
	&removeFiles($Globals{hostdir}, @toadd);
	&showInUse;
    }
    elsif($ARGV[0] eq "list") {
	&cmd_list;
    }
    else {
	&cmd_list;
    }

}

sub readInUseFiles {
    my @files = &getFiles($Globals{"hostdir"});

    foreach my $file (@files) {
	$Globals{inuse}->{$file->{name}}=$file;
    }
}

sub addFiles{
    my $dir = shift;
    my @files = @_;

    foreach my $file (@files) {
	my $name = $file->{name};
	my $path = "$dir/$name.conf";

	unless (-r $path) {
	    print "Adding $name\n";
	    symlink("../../available.d/$name.conf", $path);
	}
    }
}

sub removeFiles{
    my $dir = shift;
    my @files = @_;

    foreach my $file (@files) {
	my $name = $file->{name};
	my $path = "$dir/$name.conf";

	if(-r $path) {
	    print "Removing $name\n";
	    unlink($path);
	}
    }
}

sub symlink {
    my $target = shift;
    my $ref = shift;

    return !system("ln -s $target $ref");
}

sub filter {
    my $filesRef = shift;
    my @files = @{$filesRef};
    my @args=@_;



    # make a regexp

    my $re = "(" . join("|", @args) . ")";

    foreach my $tag (@args) {
	@files = grep { &shouldInclude($tag, $_) }  @files;
    }

    return @files;
}

sub shouldInclude {
    my $tag = shift;
    my $file = shift;
    my $opposite = 0;

    if($tag =~ /^!(.*)/) {
	$opposite = 1;
	$tag = $1;
    }

    my $predicate = $file->{name} =~ /$tag/ ||  join(",", @{$_->{tags}}) =~ /$tag/;

    return $opposite ^ $predicate;
}

sub cmd_list {
    print "\nAvailable:\n";
    &showFiles(&getFiles($Globals{"availabledir"}));
}

sub showInUse() {
    print "In Use:\n";
    &showFiles(values(%{$Globals{inuse}}));
}

sub showFiles {

    my @files = sort { $Globals{inuse}->{$a->{name}} <=> $Globals{inuse}->{$b->{name}}} @_;
    foreach my $file (@files) {
	my $name = $file->{name};
	my $description = $file->{description};
	my @tags = @{$file->{tags}};
	
	my $inuse = $Globals{inuse}->{$name}?"*":" ";

	print " $inuse$name (@tags):  $description\n";
    }
}

sub getFiles {
    my $dir = shift;
    my @files;


    # TODO:  make this more general
    my $os = `uname -o`;
    chop $os;

    return () unless -d $dir;

    opendir(my $dh, $dir) || die("Failed to read $dir: $!");

    while($_ = readdir($dh)) {
	next unless /(.*)\.conf$/;
	my $file;
	$file->{name} = $1;
	$file->{path} = "$dir/$_";
	&getFileInfo($file);
	if($file->{constraint}) {
#	    print "File $file->{name} has constraint $file->{constraint}.  We're $os\n";
	    next unless $file->{constraint} =~ /$os/;
	}
	push(@files, $file);
    }

    closedir($dh);

    return @files;
}

sub getFileInfo {
    my $file = shift;
    my $path = $file->{path};

    open(my $fh, $path) || die("could not read $file: $!");

    my @tags;

    while(<$fh>) {
	if(/tags:(.*)/) {
	    @tags = split(/\s+/, $1);
	}
	if(/description: (.*)/) {
	    $file->{description} = $1;
	}
	if(/constraint: (.*)/) {
	    $file->{constraint} = $1;
	}
    }

    $file->{tags}=\@tags;

    close $fh;
    return;
}
